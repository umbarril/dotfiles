set icons
# set previewer ~/.config/lf/lf_kitty_preview
set previewer ~/.config/lf/preview
set cleaner ~/.config/lf/lf_kitty_clean
# set drawbox
set ignorecase
set preview

################
### mappings ###
################

# many functions below copied from Brodie ( https://github.com/BrodieRobertson/dotfiles/blob/master/config/lf/lfrc )
# thank you for leaving this open!

## Basic Functions
map . set hidden!
map DD delete
map p paste
map x cut
map y copy
map <enter> open
# map <enter> :quit
#
open nvim

cmd copy_to_clipboard %{{
    if type pbcopy > /dev/null 2>&1; then
    printf '%s' "$f" | pbcopy
    elif type xsel > /dev/null 2>&1; then
    printf '%s' "$f" | xsel -ib
    fi
}}
map <c-c> :copy_to_clipboard

# unmap the default rename keybinding
map r

# renaming
map i rename
map I :rename; cmd-home
map A :rename; cmd-end
map c :rename; cmd-delete-home
map C :rename; cmd-end; cmd-delete-home

map <esc> quit
map mf mkfile
map a mkfile
map mr sudomkfile
map md mkdir
map o mkdir
map ms $mkscript
map ch chmod
map bg setwallpaper
# map o open_config
map br $vimv $fx
map r rename
map H :updir; down; open
map L :updir; up; open
map J bottom
map K top
map R reload
map C clear
map U unselect

## Movement (TODO)

# map gtr cd ~/.local/share/Trash/files
# map gus cd /run/media/brodie
# 
# map gv. cd ~/videos
# map gva cd ~/videos/anime
# 
# map gy. cd ~/videos/youtube
# map gyt cd ~/videos/youtube/ToUpload
# map gyu cd ~/videos/youtube/Uploaded
# map gya cd ~/videos/youtube/asset
# map go. cd ~/videos/podcast
# map got cd ~/videos/podcast/ToUpload
# map gou cd ~/videos/podcast/Uploaded
# 
# map gp. cd ~/pictures
# map gpm cd ~/pictures/mpvscreenshots
# map gpa cd ~/pictures/Anime
# map gps cd ~/pictures/screenshots
# 
# map gw. cd ~/pictures/Wallpapers
# map gww cd ~/pictures/Wallpapers/Wallpapers
# map gwm cd ~/pictures/Wallpapers/MobileWallpapers
# 
# map gt. cd ~/documents/Textbooks
# map gt1 cd ~/documents/Textbooks/1stYear
# map gt2 cd ~/documents/Textbooks/2ndYear
# map gt3 cd ~/documents/Textbooks/3rdYear
# map gu3 cd ~/documents/Uni/3rdYear
# map gd cd ~/documents
# 
# map gD cd ~/downloads
# map ge cd ~/desktop
# 
# map gs. cd ~/scripts
# map gsl cd ~/scripts/lf
# map gsa cd ~/scripts/alsa
# map gsi cd ~/scripts/i3
# map gse cd ~/scripts/lemonbar
# map gsp cd ~/scripts/polybar
# map gsb cd ~/scripts/bspwm
# map gsu cd ~/scripts/pulse
# map gdt cd ~/scripts/transmission
# 
# map gr. cd ~/repos
# map grb cd ~/repos/bookmenu
# map grf cd ~/repos/cleanfullscreen
# map grm cd ~/repos/dmenu
# map grd cd ~/repos/dotfiles
# map gri cd ~/repos/init
# map grk cd ~/repos/kanban-board
# map grl cd ~/repos/lbryurlconvert
# map grP cd ~/repos/PerlProjects
# map grr cd ~/repos/reading-list
# map grs cd ~/repos/st
# map grw cd ~/repos/website
# 
# map gc cd ~/.config
# map gC cd ~/.local/share/cell
# map gl cd ~/.local
# map gE cd /etc
# map gU. cd /usr
# map gUs cd /usr/share
# 
# map \;j cd ~

####################
### Commands (:) ###
####################

cmd open ${{xdg-open $fx}}

cmd q quit

cmd z %{{
	result="$(zoxide query --exclude $PWD $@ | sed 's/\\/\\\\/g;s/"/\\"/g')"
	lf -remote "send $id cd \"$result\""
}}

cmd zi ${{
	result="$(zoxide query -i | sed 's/\\/\\\\/g;s/"/\\"/g')"
	lf -remote "send $id cd \"$result\""
}}

cmd on-cd &{{
        zoxide add "$PWD"
}}

cmd mkdir ${{
  printf "Directory Name: "
  read ans
  mkdir $ans
}}

cmd mkfile ${{
  printf "File Name: "
  read ans
  $EDITOR $ans
}}

cmd chmod ${{
  printf "Mode Bits: "
  read ans

  for file in "$fx"
  do
    chmod $ans $file
  done

  lf -remote 'send reload'
}}

cmd sudomkfile ${{
  printf "File Name: "
  read ans
  sudo $EDITOR $ans
}}

# cmd setwallpaper %cp "$f" ~/.config/wall.png && xwallpaper --zoom "$f"

cmd fzf_jump ${{
  res="$(find . -maxdepth 3 | fzf --reverse --header='Jump to location')"
  if [ -f "$res" ]; then
    cmd="select"
  elif [ -d "$res" ]; then
    cmd="cd"
  fi
  lf -remote "send $id $cmd \"$res\""
}}

cmd open_config  ${{
  $EDITOR $(bookmenu -b ~/.config/bookmenu/configs -f fzf -o)
}}

cmd restore_trash ${{
  trash-restore
}}

# Trash cli bindings
cmd trash ${{
  files=$(printf "$fx" | tr '\n' ';')
  while [ "$files" ]; do
    # extract the substring from start of string up to delimiter.
    # this is the first "element" of the string.
    file=${files%%;*}

    trash-put "$(basename "$file")"
    # if there's only one element left, set `files` to an empty string.
    # this causes us to exit this `while` loop.
    # else, we delete the first "element" of the string from files, and move onto the next.
    if [ "$files" = "$file" ]; then
      files=''
    else
      files="${files#*;}"
    fi
  done
}}

# Archive bindings
cmd unarchive ${{
  case "$f" in
      *.zip) unzip "$f" ;;
      *.tar.gz) tar -xzvf "$f" ;;
      *.tar.bz2) tar -xjvf "$f" ;;
      *.tar) tar -xvf "$f" ;;
      *) echo "Unsupported format" ;;
  esac
}}

cmd zip %zip -r "$f" "$f"
cmd tar %tar cvf "$f.tar" "$f"
cmd targz %tar cvzf "$f.tar.gz" "$f"
cmd tarbz2 %tar cjvf "$f.tar.bz2" "$f"

cmd bulk-rename ${{
    old="$(mktemp)"
    new="$(mktemp)"
    if [ -n "$fs" ]; then
        fs="$(basename -a $fs)"
    else
        fs="$(ls)"
    fi
    printf '%s\n' "$fs" >"$old"
    printf '%s\n' "$fs" >"$new"
    $EDITOR "$new"
    [ "$(wc -l < "$new")" -ne "$(wc -l < "$old")" ] && exit
    paste "$old" "$new" | while IFS= read -r names; do
        src="$(printf '%s' "$names" | cut -f1)"
        dst="$(printf '%s' "$names" | cut -f2)"
        if [ "$src" = "$dst" ] || [ -e "$dst" ]; then
            continue
        fi
        mv -- "$src" "$dst"
    done
    rm -- "$old" "$new"
    lf -remote "send $id unselect"
}}

cmd follow_link %{{
  lf -remote "send ${id} select '$(readlink $f)'"
}}
# map gL follow_link
